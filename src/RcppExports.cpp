// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// init_context
SEXP init_context(int threads);
RcppExport SEXP _clustermq_init_context(SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(init_context(threads));
    return rcpp_result_gen;
END_RCPP
}
// init_socket
SEXP init_socket(SEXP context, std::string socket_type);
RcppExport SEXP _clustermq_init_socket(SEXP contextSEXP, SEXP socket_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type context(contextSEXP);
    Rcpp::traits::input_parameter< std::string >::type socket_type(socket_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(init_socket(context, socket_type));
    return rcpp_result_gen;
END_RCPP
}
// bind_socket
void bind_socket(SEXP socket, std::string address);
RcppExport SEXP _clustermq_bind_socket(SEXP socketSEXP, SEXP addressSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type socket(socketSEXP);
    Rcpp::traits::input_parameter< std::string >::type address(addressSEXP);
    bind_socket(socket, address);
    return R_NilValue;
END_RCPP
}
// connect_socket
void connect_socket(SEXP socket, std::string address);
RcppExport SEXP _clustermq_connect_socket(SEXP socketSEXP, SEXP addressSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type socket(socketSEXP);
    Rcpp::traits::input_parameter< std::string >::type address(addressSEXP);
    connect_socket(socket, address);
    return R_NilValue;
END_RCPP
}
// disconnect_socket
void disconnect_socket(SEXP socket, std::string address);
RcppExport SEXP _clustermq_disconnect_socket(SEXP socketSEXP, SEXP addressSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type socket(socketSEXP);
    Rcpp::traits::input_parameter< std::string >::type address(addressSEXP);
    disconnect_socket(socket, address);
    return R_NilValue;
END_RCPP
}
// poll_socket
SEXP poll_socket(SEXP sockets, int timeout);
RcppExport SEXP _clustermq_poll_socket(SEXP socketsSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sockets(socketsSEXP);
    Rcpp::traits::input_parameter< int >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(poll_socket(sockets, timeout));
    return rcpp_result_gen;
END_RCPP
}
// receive_socket
SEXP receive_socket(SEXP socket, bool dont_wait, bool unserialize);
RcppExport SEXP _clustermq_receive_socket(SEXP socketSEXP, SEXP dont_waitSEXP, SEXP unserializeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type socket(socketSEXP);
    Rcpp::traits::input_parameter< bool >::type dont_wait(dont_waitSEXP);
    Rcpp::traits::input_parameter< bool >::type unserialize(unserializeSEXP);
    rcpp_result_gen = Rcpp::wrap(receive_socket(socket, dont_wait, unserialize));
    return rcpp_result_gen;
END_RCPP
}
// receive_multipart
Rcpp::List receive_multipart(SEXP socket, bool dont_wait, bool unserialize);
RcppExport SEXP _clustermq_receive_multipart(SEXP socketSEXP, SEXP dont_waitSEXP, SEXP unserializeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type socket(socketSEXP);
    Rcpp::traits::input_parameter< bool >::type dont_wait(dont_waitSEXP);
    Rcpp::traits::input_parameter< bool >::type unserialize(unserializeSEXP);
    rcpp_result_gen = Rcpp::wrap(receive_multipart(socket, dont_wait, unserialize));
    return rcpp_result_gen;
END_RCPP
}
// send_socket
void send_socket(SEXP socket, SEXP data, bool dont_wait, bool send_more);
RcppExport SEXP _clustermq_send_socket(SEXP socketSEXP, SEXP dataSEXP, SEXP dont_waitSEXP, SEXP send_moreSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type socket(socketSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type dont_wait(dont_waitSEXP);
    Rcpp::traits::input_parameter< bool >::type send_more(send_moreSEXP);
    send_socket(socket, data, dont_wait, send_more);
    return R_NilValue;
END_RCPP
}
// has_connectivity
bool has_connectivity(std::string host);
RcppExport SEXP _clustermq_has_connectivity(SEXP hostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    rcpp_result_gen = Rcpp::wrap(has_connectivity(host));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_cmq_master();
RcppExport SEXP _rcpp_module_boot_cmq_worker();
RcppExport SEXP _rcpp_module_boot_zmq();

static const R_CallMethodDef CallEntries[] = {
    {"_clustermq_init_context", (DL_FUNC) &_clustermq_init_context, 1},
    {"_clustermq_init_socket", (DL_FUNC) &_clustermq_init_socket, 2},
    {"_clustermq_bind_socket", (DL_FUNC) &_clustermq_bind_socket, 2},
    {"_clustermq_connect_socket", (DL_FUNC) &_clustermq_connect_socket, 2},
    {"_clustermq_disconnect_socket", (DL_FUNC) &_clustermq_disconnect_socket, 2},
    {"_clustermq_poll_socket", (DL_FUNC) &_clustermq_poll_socket, 2},
    {"_clustermq_receive_socket", (DL_FUNC) &_clustermq_receive_socket, 3},
    {"_clustermq_receive_multipart", (DL_FUNC) &_clustermq_receive_multipart, 3},
    {"_clustermq_send_socket", (DL_FUNC) &_clustermq_send_socket, 4},
    {"_clustermq_has_connectivity", (DL_FUNC) &_clustermq_has_connectivity, 1},
    {"_rcpp_module_boot_cmq_master", (DL_FUNC) &_rcpp_module_boot_cmq_master, 0},
    {"_rcpp_module_boot_cmq_worker", (DL_FUNC) &_rcpp_module_boot_cmq_worker, 0},
    {"_rcpp_module_boot_zmq", (DL_FUNC) &_rcpp_module_boot_zmq, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_clustermq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
